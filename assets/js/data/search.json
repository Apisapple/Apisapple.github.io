[ { "title": "리팩토링(5)_객체 사이의 기능 이동", "url": "/posts/Refactoring(5)/", "categories": "Refactoring", "tags": "develop, Refactoring", "date": "2021-11-11 01:56:00 +0900", "snippet": "메서드 이동하나의 클래스에서 기능이 너무 많거나 클래스가 다른 클래스와 과하게 연동이 되어 의존성이 지나칠 때는 메서드를 옮기는 것이 좋다. 메서드를 옮기면 클래스가 간결해지고 여러 기능을 더 명확하게 할 수 있다.방법 원본 클래스에 정의되어 있는 메서드에 사용되는 모든 기능을 확인한다. 기능을 확인하며 그 기능들도 전부 옮겨야 하는지 판단한다. 옮길 메서드에서만 사용이 되는 기능도 함께 옮길 수 있어야 한다. 그 기능이 다른 메서드에도 사용이 된다면 함께 옮기는 것을 고려해야 한다. 원본 클래스..." }, { "title": "스마트 컨트랙트 개발 중 enum class 활용", "url": "/posts/%EC%BB%A8%ED%8A%B8%EB%9E%99%ED%8A%B8%EA%B0%9C%EB%B0%9C/", "categories": "EOSIO", "tags": "BLOCK CHAIN, EOSIO, SMART CONTRACT, CPP, REFACTORING", "date": "2021-11-02 23:35:00 +0900", "snippet": "EOSIO 스마트 컨트랙트 개발 중 enum class 활용회사에서 웹 서버 개발과 블록체인 스마트 컨트랙트 개발 업무를 하면서 다음과 같은 문제의 상황을 확인하였다.using namespace std;struct [[eosio::table]] person { name key; std::string first_name; std::string last_name; std::string street; std::string city; std::string state; uint64_t ..." }, { "title": "리팩토링(4)_method 정리_2", "url": "/posts/Refactoring(4)/", "categories": "Refactoring", "tags": "develop, Refactoring", "date": "2021-09-28 21:00:00 +0900", "snippet": "Refactoring (3)_method 정리 - 2nd5. 직관적 임시변수 사용 사용된 수식이 복잡할 때, 수식의 결과나 수식의 일부부분을 용도에 맞는 직관적인 이름의 임시변수에 대입방법 임시 변수를 final로 선언하고, 복잡한 수식에서 한 부분의 결과를 그 임시변수에 대입 그 수식에서 한 부분의 결과를 그 임시변수의 값으로 교체 수식의 결과 부분이 반복될 경우엔 한 번에 하나씩 교체 컴파일 및 테스트 실시 수식의 다른 부분을 대상으로 위의 과정을 반복 실시6. 임시변수의 분리 루프 변..." }, { "title": "EOSIO_1", "url": "/posts/EOSIO/", "categories": "EOSIO", "tags": "Block chain, EOSIO", "date": "2021-08-15 01:35:00 +0900", "snippet": "EOSIO 지원환경 및 계정 권한과 합의 알고리즘업무를 하며 Smart Contract에 대해서 공부를 하게 될 계기가 있었고 그 때 공부를 한 내용을 정리를 하고자 한다.EOSIO의 지원환경EOSIO의 지원환경은 다음과 같다. Amazon Linux 2 CentOS 7 CentOS 7.x CentOS 8 Ubuntu 16.04 Ubuntu 18.04 Ubuntu 20.04 MacOS 10.14 (Mojave) MacOS 10.15 (Catalina)용어 정리Block Producer EOSIO 환경에서 블..." }, { "title": "리팩토링(3)_method 정리", "url": "/posts/Refactoring(3)/", "categories": "Refactoring", "tags": "develop, Refactoring", "date": "2021-06-28 21:00:00 +0900", "snippet": "Refactoring (3)_method 정리 - 1st1. 매서드 추출 (Extract Method) 어떤 코드를 그룹으로 묶어도 괜찮다고 판단이 된다면, 그 코드를 빼내어 목적을 잘 나타내는 직관적인 이름의 method로 만들자.방법 목적에 부합하는 이름의 새로운 method를 생성하자. 이 때 이름은 원리가 아닌 기능을 나타내는 이름으로 한다. method로 빼낼 코드가 한 줄의 명령이나 함수 호출 같이 아주 간단한 것이라면 새 method명을 통해 그 코드의 기능(목적)을 더 잘 드러낼 수 있을 때만..." }, { "title": "리팩토링(2)", "url": "/posts/Refactoring(2)/", "categories": "Refactoring", "tags": "develop, Refactoring", "date": "2021-05-29 19:00:00 +0900", "snippet": "Refactoring (2)리팩토링과 설계 사전 설계 없이 리팩토링만 하는 방법도 문제는 없지만, 작업에서 가장 효율적인 방법은 아님 리팩토링을 통해 사전 설계 과정에서 완벽한 솔루션을 찾을 필요가 없어진다. 즉, 설계가 단순해지는 효과가 나타난다. 리팩토링과 성능 빠른 SW를 작성할 수 있는 일반적인 방법 철저한 시간 분배 성능에 대해서 꾸준한 괌신을 갖도록 하는 것 개발 절차 중에는 잘게 쪼개서 사용 즉, 리팩토링은 단기적으로는 SW가 느려질 수 있지..." }, { "title": "M과 M(3)[백준 15651번]", "url": "/posts/%EB%B0%B1%EC%A4%80_N%EA%B3%BCM(3)/", "categories": "Algorithm, acmicpc", "tags": "DFS, 백준", "date": "2021-05-10 00:35:00 +0900", "snippet": "N과 M(3) [백준 15651]문제문제링크https://www.acmicpc.net/problem/15651문제 내용 자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오. 1부터 N까지 자연수 중에서 M개를 고른 수열 같은 수를 여러 번 골라도 된다. 입력 첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 7)출력 한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수..." }, { "title": "리팩토링(1)", "url": "/posts/Refactoring(1)/", "categories": "Refactoring", "tags": "develop, Refactoring", "date": "2021-05-05 18:00:00 +0900", "snippet": "Refactoring (1) 최근 업무를 하며 기존의 레거시 코드를 수정해야만 하는 일이 생겼습니다.기존의 코드를 보면서 코드를 깔끔하게 작성하지 않았을 때, 수정하기 어렵고 다른 사람의 코드를 보았을 때 이해하기 어렵다는 것을 느껴 코드를 분리하고 클래스를 정리하는 등의 작업을 하였습니다. 그러던 중, 최근 토스 컨퍼런스에서 Clean Code와 관련된 발표 내용을 듣게 되면서 리팩토링을 제대로 공부를 해보고 싶다는 생각에 공부를 시작했습니다.리팩토링(Refactoring)이란 무엇일까? 겉으로 드러나는 기능은 그대로 ..." }, { "title": "정보보호기사_운영체제 이해 및 관리", "url": "/posts/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EC%9D%B4%ED%95%B4-%EB%B0%8F-%EA%B4%80%EB%A6%AC/", "categories": "자격증, 정보보호기사", "tags": "자격증, 정보보호기사", "date": "2021-02-01 20:00:00 +0900", "snippet": "정보화사회의 정보보호운영체제 이해 및 관리CPU(Central Processing Unit, 중앙처리장치)의 구조적 이해CPU의 구조 이해CPU 개념 입력장치로부터 자료를 받아 연산하고 그 결과를 출력장치로 보내는 일련의 과정을 제어 · 조정하는 핵심장치 사람의 두뇌에 해당CPU의 구성요소 구성요소 상세 기능 ALU (연산장치) 각종 산술연산과 논리연산들을 수행하는 회로 Register (레지스터) CPU 내부의 소규모 데이..." }, { "title": "정보보호기사_정보보호관리의 개념 1", "url": "/posts/%EC%A0%95%EB%B3%B4%EB%B3%B4%ED%98%B8%EA%B4%80%EB%A6%AC%EC%9D%98-%EA%B0%9C%EB%85%90/", "categories": "자격증, 정보보호기사", "tags": "자격증, 정보보호기사", "date": "2020-12-30 21:00:00 +0900", "snippet": "정보화사회의 정보보호정보사회의 특성과 정보화 역기능정보사회의 특성 인터넷 확산과 전자상거래로 단일 생활권으로 압축 전자메일 및 인터넷을 통해 직접 방문없이 이체, 주식매매 등을 할 수 있음 기존의 전쟁개념에서 자동화된 지휘통제시스템과 바이러스를 사용한 사이버 전쟁 개념이 복합된 모습으로 변화정보화의 역기능 개인의 프라이버시 침해, 각종 컴퓨터 범죄 행위의 기승, 정보시스템의 파괴에 의한 사회마비 등사이버 환경의 특징 비대면성 익명성 시간 및 공간 운영의 무제한성 무제한적인 정보 및 신속한 전송 미래의 범죄 및 ..." }, { "title": "톱니바퀴[백준 14891번]", "url": "/posts/%EB%B0%B1%EC%A4%80_%ED%86%B1%EB%8B%88%EB%B0%94%ED%80%B4/", "categories": "Algorithm, acmicpc", "tags": "시뮬레이션, 백준", "date": "2020-11-02 03:05:00 +0900", "snippet": "톱니바퀴 [백준 14891]문제문제링크https://www.acmicpc.net/problem/14891문제 내용 총 8개의 톱니를 가지고 있는 톱니바퀴 4개가 아래 그림과 같이 일렬로 놓여져 있다. 톱니바퀴를 총 K번 회전시키려고 한다. 톱니바퀴의 회전은 한 칸을 기준으로 한다. 회전은 시계 방향과 반시계 방향이 있다. 톱니바퀴가 회전할 때, 서로 맞닿은 극에 따라서 옆에 있는 톱니바퀴를 회전시킬 수도 있고, 회전시키지 않을 수도 있다. 톱니바퀴 A를 회전할 때, 그 옆에 있는 톱니바퀴 B와 서로 맞닿은 톱니의 극이 다..." }, { "title": "Cloud computing 및 Infra 기초 정리", "url": "/posts/Cloud-computing-%EB%B0%8F-Infra-%EA%B8%B0%EC%B4%88-%EC%A0%95%EB%A6%AC/", "categories": "Cloud", "tags": "Cloud, Infra", "date": "2020-10-23 15:10:00 +0900", "snippet": "클라우드 컴퓨팅 이란? 인터넷에 기반한 개발과 컴퓨터 기술의 활용을 말하는 것으로, 인터넷을 통해서 동적으로 규모화 가능한 가상적 자원들이 제공되는 컴퓨팅 [출처 : 위키피디아]중심되는 IDEA 유틸리티 컴퓨팅 중앙 집중적인 서비스 공급자와의 계약을 통해 실제로 사용한 양에 의해 요금을 지불하는 컴퓨팅 패러다임 SOA(Service Oriented Architecture) 서비스들을 서로 조합하여 업무 기능을 구현한 애플리케이션을 만들어내는 SW 아키텍처 SLA(Se..." }, { "title": "API GATEWAY", "url": "/posts/API_GATEWAY/", "categories": "Architecture", "tags": "Architecture, API Gateway", "date": "2020-10-18 20:55:00 +0900", "snippet": "API GATEWAY MSA에서 언급되는 컴포넌트 중 하나이며, 모든 클라이언트 요청에 대한 End Point를 통합하는 서버를 의미한다.API GATEWAY의 필요성하나의 큰 서비스를 수십 혹은 수백개의 작은 서비스로 나누면서, 이를 클라이언트에서 서비스를 직접 호출하는 형태라면 아래와 같은 문제가 생길 수 있다. 각 서비스마다 인증 / 인가 등의 공통된 로직을 구현해야하는 번거로움이 발생한다. API호출을 기록하고 관리하기 어렵다. 클라이언트에서 여러 마이크로 서비스에 대한 번거로운 호출을 해야한다.1 내부 비즈니..." }, { "title": "이동하기[백준 11048번]", "url": "/posts/%EB%B0%B1%EC%A4%80_%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0/", "categories": "Algorithm, acmicpc, DP", "tags": "DP, 백준", "date": "2020-10-12 01:35:00 +0900", "snippet": "이동하기 [백준 11048]문제문제링크acmicpc.net/problem/11048문제 내용 준규는 N×M 크기의 미로에 갇혀있다. 미로는 1×1크기의 방으로 나누어져 있고, 각 방에는 사탕이 놓여져 있다. 미로의 가장 왼쪽 윗 방은 (1, 1)이고, 가장 오른쪽 아랫 방은 (N, M)이다. 준규는 현재 (1, 1)에 있고, (N, M)으로 이동하려고 한다. 준규가 (r, c)에 있으면, (r+1, c), (r, c+1), (r+1, c+1)로 이동할 수 있고, 각 방을 방문할 때마다 방에 놓여져있는 사탕을 모두 가져갈 수..." }, { "title": "MSA(Microservice Architecture)", "url": "/posts/MSA/", "categories": "Architecture", "tags": "Architecture, Micro Service Architecture", "date": "2020-10-10 18:20:00 +0900", "snippet": "MSA(Microservice Architecture) 하나의 큰 어플리케이션을 여러개의 작은 어플리케이션으로 쪼개어 변경과 조합이 가능하도록 만든 아키텍쳐Monolithic 과 MicroserviceMonolithic Architecture 장점 어떤 기능이든지 개발되어있는 환경이 같아 복잡하지 않다. 쉽게 높은 가용성을 가진 서버 환경을 만들 수 있다. End-to-End 테스트가 용이하다. 단점 한 프로젝트의 크기가 너무 커지게 될 경우, 구동시간이 늘어..." }, { "title": "SOA(Service Oriented Architecture)", "url": "/posts/SOA/", "categories": "Architecture", "tags": "Architecture, Micro Service Architecture", "date": "2020-10-10 16:00:00 +0900", "snippet": "SOA(Service Oriented Architecture) 업무상의 일 처리에 해당하는 소프트웨어 기능을 서비스로 판단하여 그 서비스를 네트워크상에 연동하여 시스템 전체를 구축해 나가는 방법론[출처 : 위키피디아]SOA가 주목받는 이유 CORBA등의 기술의 난이도가 높은 문제가 되어 왔으나 현재에는 XML, HTTP나 SOAP 기반의웹 서비스 기술의 등장으로 서비스 구현의 기술 난이도가 낮아졌기 때문에 점점 확장되어가는 독립적인 업무 시스템으로 인해 통합에 대한 요구가 증가 급격하게 변해가는 비즈니스 환경의 변화에 ..." } ]
