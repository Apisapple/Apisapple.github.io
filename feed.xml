<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://apisapple.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://apisapple.github.io/" rel="alternate" type="text/html" hreflang="ko" /><updated>2022-01-03T21:45:22+09:00</updated><id>https://apisapple.github.io/feed.xml</id><title type="html">Apisapple</title><subtitle>A minimal</subtitle><entry><title type="html">리팩토링(5)_객체 사이의 기능 이동</title><link href="https://apisapple.github.io/posts/Refactoring(5)/" rel="alternate" type="text/html" title="리팩토링(5)_객체 사이의 기능 이동" /><published>2021-11-11T01:56:00+09:00</published><updated>2021-11-11T01:56:00+09:00</updated><id>https://apisapple.github.io/posts/Refactoring(5)</id><content type="html" xml:base="https://apisapple.github.io/posts/Refactoring(5)/">&lt;h2 id=&quot;메서드-이동&quot;&gt;메서드 이동&lt;/h2&gt;

&lt;p&gt;하나의 클래스에서 기능이 너무 많거나 클래스가 다른 클래스와 과하게 연동이 되어 의존성이 지나칠 때는 메서드를 옮기는 것이 좋다. 
메서드를 옮기면 클래스가 간결해지고 여러 기능을 더 명확하게 할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;방법&quot;&gt;방법&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;원본 클래스에 정의되어 있는 메서드에 사용되는 모든 기능을 확인한다. 기능을 확인하며 그 기능들도 전부 옮겨야 하는지 판단한다.
    &lt;ul&gt;
      &lt;li&gt;옮길 메서드에서만 사용이 되는 기능도 함께 옮길 수 있어야 한다. 
그 기능이 다른 메서드에도 사용이 된다면 함께 옮기는 것을 고려해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;원본 클래스의 하위 클래스와 상위 클래스에서 메서드에 대한 다른 선언이 있는지 확인한다.
    &lt;ul&gt;
      &lt;li&gt;다른 선언이 있다면 대상 클래스에도 재정의를 넣을 수 있을 때만 옮길 수 있을지도 모른다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이동할 메서드를 옮길 클래스 안에 선언한다.&lt;/li&gt;
  &lt;li&gt;원본 메서드의 코드를 대상 메서드에 복사한 후, 대상 클래스 안에서 정상 동작하도록 대상 메서드를 수정한다.
    &lt;ul&gt;
      &lt;li&gt;대상 매서드가 원본 매서드를 사용한다면 대상 메서드 안에서 원본 객체를 참조할 방법을 정해야 한다.
대상 클래스에 원본 객체를 참조하는 기능이 없다면 원본 객체 참조를 대상 매서드에 매개 변수로 전달한다.&lt;/li&gt;
      &lt;li&gt;대상 매서드에 예외처리 코드가 들어 있다면 예외를 논리적으로 어느 클래스가 처리할지 정한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;대상 클래스를 컴파일 한다.&lt;/li&gt;
  &lt;li&gt;원본 객체에서 대상 객체를 참조할 방법을 정한다.
    &lt;ul&gt;
      &lt;li&gt;대상 클래스를 참조하는 속성이나 메서드가 없고 대상 클래스를 참조하는 메서드를 쉽게 작성할 수 없다면 원본 클래스 안에 대상 클래스를 저장할 수 있는 새 속성을 선언해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;원본 메서드를 위임 메서드로 전환한다.&lt;/li&gt;
  &lt;li&gt;컴파일과 테스트를 진행한다.&lt;/li&gt;
  &lt;li&gt;원본 메서드를 삭제하거나 위임 메서드로 사용하도록 유지한다.&lt;/li&gt;
  &lt;li&gt;컴파일 후 테스트를 진행한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;필드-이동&quot;&gt;필드 이동&lt;/h2&gt;

&lt;p&gt;클래스 안에 있는 어떠한 필드가 자신이 속한 클래스보다 다른 클래스에 있는 메서드를 더 많이 참조해서 정보를 이용한다면 그 필드를 다른 클래스로 옮기는 것이 필요할 수 있다. &lt;u&gt;인터페이스에 따라서 메서드를 옮기는 방법을 사용할 수도 있지만 메서드는 현재의 위치가 적절하다고 생각이 될 경우, 필드를 옮긴다.&lt;/u&gt;&lt;/p&gt;

&lt;h3 id=&quot;방법-1&quot;&gt;방법&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;필드가  public이라면 &lt;a href=&quot;#필드-캡슐화&quot;&gt;필드 캡슐화&lt;/a&gt;를 실시한다.&lt;/li&gt;
  &lt;li&gt;테스트를 실시한다.&lt;/li&gt;
  &lt;li&gt;옮길 대상 클래스 안에 읽기 / 쓰기 메서드와 함께 필드를 작성한다.&lt;/li&gt;
  &lt;li&gt;원본이 되는 클래스에서 대상 클래스를 참조할 수 있는 방법을 선정한다.&lt;/li&gt;
  &lt;li&gt;원본 클래스에서 필드를 삭제한다.&lt;/li&gt;
  &lt;li&gt;원본 필드를 참조하는 모든 부분을 대상 클래스에 있는 적절한 메스드를 참조하여 수정하도록 한다.&lt;/li&gt;
  &lt;li&gt;테스트를 진행한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;필드-캡슐화&quot;&gt;필드 캡슐화&lt;/h3&gt;

&lt;h4 id=&quot;필드-캡슐화-전&quot;&gt;필드 캡슐화 전&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;필드-캡슐화-후&quot;&gt;필드 캡슐화 후&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setCity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;필드-자체-캡슐화&quot;&gt;필드 자체 캡슐화&lt;/h3&gt;

&lt;p&gt;많은 메서드가 특정 필드를 사용한다면 필드 자체 캡슐화를 진행하는 것이 좋다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccountType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interestRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;interestForAmoutDays&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInterestRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setInterestRate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interestRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interestRate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interestRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInterestRate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interestRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;클래스-추출&quot;&gt;클래스 추출&lt;/h2&gt;

&lt;p&gt;두 개의 클래스가 처리해야 하는 기능이 하나의 클래스에 들어 있을 때, 새로운 클래스를 만들고 기존 클래스와 
관련된 필드와 캐서드를 새 클래스로 옮겨야 한다.&lt;/p&gt;

&lt;h3 id=&quot;방법-2&quot;&gt;방법&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;클래스의 기능 분리 방법을 정한다.&lt;/li&gt;
  &lt;li&gt;분리한 기능을 넣을 새로운 클래스를 작성한다.
    &lt;ul&gt;
      &lt;li&gt;원본 클래스의 기능이 이름과 어울리지 않게 바뀌었다면 원본 클래스의 이름을 변경할 필요가 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;원본 클래스에서 새 클래스로의 링크를 만든다.&lt;/li&gt;
  &lt;li&gt;옮길 필드마다 &lt;a href=&quot;#필드-이동&quot;&gt;필드 이동&lt;/a&gt;을 적용한다.&lt;/li&gt;
  &lt;li&gt;필드를 하나씩 옮길 때마다 컴파일과 테스트를 실시한다.&lt;/li&gt;
  &lt;li&gt;메서드 이동을 통해서 원본 클래스의 메서드를 하나씩 새로운 클래스로 옮긴다. 하급 메서드(호출되는 메서드) 부터 상급 메서드(호출하는 메서드)에 적용한다.&lt;/li&gt;
  &lt;li&gt;메서드 이동을 실시할 때마다 테스트를 진행한다.&lt;/li&gt;
  &lt;li&gt;각 클래스를 다시 검사해서 인터페이스를 줄인다.
    &lt;ul&gt;
      &lt;li&gt;양방향 링크가 있다면 단방향으로 바꿀 수 있는지 결정한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;여러 곳에서 클래스에 접근할 수 있게 할지 결정한다.
    &lt;ul&gt;
      &lt;li&gt;여러 곳에서 접근할 수 있게 할 경우, 새로운 클래스를 참조 객체나 변경불가 객체로서 공개할지 여부를
결정한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;주의-사항&quot;&gt;주의 사항&lt;/h3&gt;

&lt;p&gt;클래스 추출을 통해 새로 생성된 클래스를 공개하는 방식을 사용할 때, 왜곡의 위험을 고려해야 한다. 
변경한 클래스의 주체가 직접 호출한 클라이언트가 아니라 클라이언트의 클라이언트일 수도 있기 때문이다. 
이러한 경우, 다음과 같은 3가지 중 하나를 선택해야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;모든 객체가 새로 생성된 클래스의 어느 부분이든 변경할 수 있음을 받아들인다.
이러면 새로운 클래스가 참조 객체가 되므로 값을 참조로 전환 방법을 실시해야 한다.&lt;/li&gt;
  &lt;li&gt;어떤 주체든 분리를 시킨 원본  클래스를 거치지 않고는 새로 생성된 클래스의 값을 변경하지 못하게 한다.&lt;/li&gt;
  &lt;li&gt;새로 생성된 클래스를 외부로 전달하기 전에 복사한 후 변경불가로 만든다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;참고자료&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;리팩토링_코드 품질을 개선하는 객체지향 사고법 _마틴파울러 저&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="Refactoring" /><category term="develop" /><category term="Refactoring" /><summary type="html">메서드 이동</summary></entry><entry><title type="html">스마트 컨트랙트 개발 중 enum class 활용</title><link href="https://apisapple.github.io/posts/%EC%BB%A8%ED%8A%B8%EB%9E%99%ED%8A%B8%EA%B0%9C%EB%B0%9C/" rel="alternate" type="text/html" title="스마트 컨트랙트 개발 중 enum class 활용" /><published>2021-11-02T23:35:00+09:00</published><updated>2021-11-04T01:56:28+09:00</updated><id>https://apisapple.github.io/posts/%EC%BB%A8%ED%8A%B8%EB%9E%99%ED%8A%B8%EA%B0%9C%EB%B0%9C</id><content type="html" xml:base="https://apisapple.github.io/posts/%EC%BB%A8%ED%8A%B8%EB%9E%99%ED%8A%B8%EA%B0%9C%EB%B0%9C/">&lt;h1 id=&quot;eosio-스마트-컨트랙트-개발-중-enum-class-활용&quot;&gt;EOSIO 스마트 컨트랙트 개발 중 enum class 활용&lt;/h1&gt;

&lt;p&gt;회사에서 웹 서버 개발과 블록체인 스마트 컨트랙트 개발 업무를 하면서 다음과 같은 문제의 상황을 확인하였다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eosio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;street&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

     &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primary_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eosio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multi_index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;people&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ACTION&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findaddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;street&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                  	&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
        
    &lt;span class=&quot;n&quot;&gt;address_index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; 
          &lt;span class=&quot;s&quot;&gt;&quot;#ERROR - CODE : 100000, DESC : couldn't find a person.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ACTION&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deladdress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
        
         
    &lt;span class=&quot;n&quot;&gt;address_index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; 
          &lt;span class=&quot;s&quot;&gt;&quot;#ERROR - CODE : 100000, DESC : couldn't find a person.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예외처리를 하면서 반환하는 에러 코드와 에러에 대한 설명이  모두 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; 형태로 들어가 있었다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACTION&lt;/code&gt;의 수가 적으면 상관이 없을 수 있지만, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACTION&lt;/code&gt;의 수가 많아지고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACTION&lt;/code&gt;의 과정이 복잡해지면서 내부 함수가 많아지게 되면 프로그램의 여러 곳에서 예외처리를 해줘야 하는 상황이 발생할 수 있다.&lt;/p&gt;

&lt;p&gt;다행히 EOS는 c++의 문법을 바탕으로 만들 수 있어 c++에서의  enum class를 활용해서 리팩토링을 적용해 보기로 했다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ErrorCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CANNOT_FIND_PERSON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ALREADY_EXIST_PERSON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이를 통해서 위에 소스코드가 다음과 같이 변경을 할 수 있었다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eosio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;street&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

     &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primary_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eosio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multi_index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;people&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ACTION&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findaddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;street&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                  	&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
        
    &lt;span class=&quot;n&quot;&gt;address_index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; 
          &lt;span class=&quot;s&quot;&gt;&quot;#ERROR - CODE : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CANNOT_FIND_PERSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
          &lt;span class=&quot;s&quot;&gt;&quot; DESC : couldn't find a person.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ACTION&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deladdress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
        
         
    &lt;span class=&quot;n&quot;&gt;address_index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; 
          &lt;span class=&quot;s&quot;&gt;&quot;#ERROR - CODE : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CANNOT_FIND_PERSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&quot; DESC : couldn't find a person.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이를 통해서 다음과 같은 이점을 얻을 수 있었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;코드를 조금 더 가독성을 좋게 만들었다.&lt;/li&gt;
  &lt;li&gt;enum을 통해서 구현의 의도가 열거임을 알 수 있다.&lt;/li&gt;
  &lt;li&gt;에러코드를 수정할 때 여러 곳에서 수정하는 것이 아닌 한 곳에서 수정하는 것이 가능해졌다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;하지만 뭔가 아쉽다. 에러코드와 에러에 따른 메시지가 맵핑이 되는 경우가 많고 메시지는 아직 수정할 때 직접 그 부분을 모두 찾아서 수정해야 하는 상황이다.  하지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c++&lt;/code&gt;은 enum을 기본적으로 정수형을 열거하는데 사용하기 때문에 문자열을 열거하는데는 사용할 수 없었다.&lt;/p&gt;

&lt;p&gt;그래서 다음과 같은 함수를 사용해서 string이 입력이 되도록 했다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ErrorCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CANNOT_FIND_PERSON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ALREADY_EXIST_PERSON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getErrorMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorCode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CANNOT_FIND_PERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DESC : couldn't find a person.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ALREADY_EXIST_PERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DESC : person is already exist &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eosio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;street&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

     &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primary_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eosio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multi_index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;people&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ACTION&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findaddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;street&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                  	&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
        
    &lt;span class=&quot;n&quot;&gt;address_index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; 
          &lt;span class=&quot;s&quot;&gt;&quot;#ERROR - CODE : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CANNOT_FIND_PERSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;getErrorMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CANNOT_FIND_PERSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ACTION&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deladdress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
        
         
    &lt;span class=&quot;n&quot;&gt;address_index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; 
          &lt;span class=&quot;s&quot;&gt;&quot;#ERROR - CODE : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CANNOT_FIND_PERSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;getErrorMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CANNOT_FIND_PERSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만 이 역시 C style에 가까운 방식이고 조금 더 c++ 스러운 방식이 있을 것으로 생각이 된다.
EOSIO에서 모든 c++ 문법이 지원이 되는 것이 아니라 조금 더 방법을 찾고 적용을 해볼 수 있도록 해야겠다.&lt;/p&gt;</content><author><name></name></author><category term="EOSIO" /><category term="BLOCK CHAIN" /><category term="EOSIO" /><category term="SMART CONTRACT" /><category term="CPP" /><category term="REFACTORING" /><summary type="html">EOSIO 스마트 컨트랙트 개발 중 enum class 활용</summary></entry><entry><title type="html">리팩토링(4)_method 정리_2</title><link href="https://apisapple.github.io/posts/Refactoring(4)/" rel="alternate" type="text/html" title="리팩토링(4)_method 정리_2" /><published>2021-09-28T21:00:00+09:00</published><updated>2021-09-28T21:00:00+09:00</updated><id>https://apisapple.github.io/posts/Refactoring(4)</id><content type="html" xml:base="https://apisapple.github.io/posts/Refactoring(4)/">&lt;h1 id=&quot;refactoring-3_method-정리---2nd&quot;&gt;Refactoring (3)_method 정리 - 2nd&lt;/h1&gt;

&lt;h3 id=&quot;5-직관적-임시변수-사용&quot;&gt;5. 직관적 임시변수 사용&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;사용된 수식이 복잡할 때, 수식의 결과나 수식의 일부부분을 용도에 맞는 직관적인 이름의 임시변수에 대입&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;방법&quot;&gt;방법&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;임시 변수를 final로 선언하고, 복잡한 수식에서 한 부분의 결과를 그 임시변수에 대입&lt;/li&gt;
  &lt;li&gt;그 수식에서 한 부분의 결과를 그 임시변수의 값으로 교체
    &lt;ul&gt;
      &lt;li&gt;수식의 결과 부분이 반복될 경우엔 한 번에 하나씩 교체&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;컴파일 및 테스트 실시&lt;/li&gt;
  &lt;li&gt;수식의 다른 부분을 대상으로 위의 과정을 반복 실시&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;6-임시변수의-분리&quot;&gt;6. 임시변수의 분리&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;루프 변수나 값 누적용 임시변수가 아닌 임시변수에 여러 번 값이 대입이 될 때는, 
각 대입마다 다른 임시변수를 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;방법-1&quot;&gt;방법&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;선언문과 첫 번째 대입문에 있는 임시변수 이름을 변경&lt;/li&gt;
  &lt;li&gt;이름을 바꾼 새 임시변수를 final로 선언&lt;/li&gt;
  &lt;li&gt;새로운 임시변수의 모든 참조 부분을 두 번째 대입문으로 수정&lt;/li&gt;
  &lt;li&gt;두 번째 대입문에 있는 임시변수를 선언&lt;/li&gt;
  &lt;li&gt;컴파일 및 테스트&lt;/li&gt;
  &lt;li&gt;각 대입문마다 차례로 선언문에서 임시변수 이름을 변경하고, 그 다음 대입문까지 참조를 수정 
위의 과정을 반복 수행&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;예시&quot;&gt;예시&lt;/h4&gt;

&lt;h5 id=&quot;리팩토링-전&quot;&gt;리팩토링 전&lt;/h5&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDistanceTrabelled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryForce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_dalay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondaryTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondaryTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryVel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 변수 acc에 값이 2번 대입이 되는 상황 용도에 따라서 변경이 필요&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primaryForce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondaryForce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryVel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondaryTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
			&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondaryTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondaryTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;리팩토링-후&quot;&gt;리팩토링 후&lt;/h5&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDistanceTrabelled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryAcc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryForce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_dalay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryAcc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondaryTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondaryTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryVel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryAcc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 변수 acc에 2번 대입이 되는 것을 용도에 따라서 변경&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondaryAcc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primaryForce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondaryForce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryVel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondaryTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
			&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondaryAcc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondaryTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondaryTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;7-매개변수로의-값-대입-제거&quot;&gt;7. 매개변수로의 값 대입 제거&lt;/h3&gt;

&lt;p&gt;매개변수로 값을 대입하는 코드가 있을 때, 매개변수 대신 임시변수를 사용하게 수정&lt;/p&gt;

&lt;h4 id=&quot;방법-2&quot;&gt;방법&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;매개변수 대신 사용할 임시변수를 선언&lt;/li&gt;
  &lt;li&gt;매개변수로 값을 대입하는 코드 뒤에 나오는 매개변수 참조를 전부 임시변수로 수정&lt;/li&gt;
  &lt;li&gt;매개변수로의 값 대입을 임시변수로의 값 대입으로 수정&lt;/li&gt;
  &lt;li&gt;컴파일 및 테스트 실행&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;예시-1&quot;&gt;예시&lt;/h4&gt;

&lt;h5 id=&quot;리팩토링-전-1&quot;&gt;리팩토링 전&lt;/h5&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;discount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yearToDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;inputVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;inputVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yearToDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;inputVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;리팩토링-후-1&quot;&gt;리팩토링 후&lt;/h5&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;discount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yearToDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yearToDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;8-메서드를-메서드-객체로-전환&quot;&gt;8. 메서드를 메서드 객체로 전환&lt;/h3&gt;

&lt;p&gt;지역변수 때문에 메서드 추출을 적용할 수 없는 긴 매서드가 있을 때,
그 메서드 자체를 객체로 전환해서 모든 지역변수를 객체의 필드로 전환. 
그 후,  그 메서드를 객체안의 여러 메서드로 쪼갠다.&lt;/p&gt;

&lt;h4 id=&quot;방법-3&quot;&gt;방법&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;전환할 메서드의 이름과 같은 이름으로 새 클래스를 생성&lt;/li&gt;
  &lt;li&gt;그 클래스에 원본 메서드가 들어 있던 객체를 나타내는  final 필드를 추가하고 
원본 메서드 안의 각 임시변수와 매개변수에 해당하는 속성을 추가&lt;/li&gt;
  &lt;li&gt;새 클래스에 원본 객체와 각 매개변수를 받는 생성자 메서드 작성&lt;/li&gt;
  &lt;li&gt;새 클래스에 compute라는 이름의 메서드 작성&lt;/li&gt;
  &lt;li&gt;원본 메서드 내용을 compute 메서드 안에 복사. 원본 객체에 있는 메서드를 호출할 때 원본 객체를 나타내는 필드를 사용&lt;/li&gt;
  &lt;li&gt;컴파일 실행&lt;/li&gt;
  &lt;li&gt;원본 메서드를 새 객체 생성과 compute 메서드 호출을 담당하는 메서드로 바꾼다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;9-알고리즘-전환&quot;&gt;9. 알고리즘 전환&lt;/h3&gt;

&lt;p&gt;알고리즘을 더 분명한 것으로 교체를 해야할 때, 해당 메서드의 내용을 새 알고리즘으로 변환&lt;/p&gt;

&lt;h4 id=&quot;방법-4&quot;&gt;방법&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;교체할 간결한 알고리즘을 준비. 컴파일 실시&lt;/li&gt;
  &lt;li&gt;새 알고리즘을 실행하면서 여러 번의 테스트 실시. 
모든 테스트 결과가 같으면 알고리즘 전환이 성공한 것으로 판단.&lt;/li&gt;
  &lt;li&gt;결과가 다르게 나온다면, 기존의 알고리즘으로 테스트 및 디버깅을 실시&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;참고자료&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;리팩토링_코드 품질을 개선하는 객체지향 사고법 _마틴파울러 저&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="Refactoring" /><category term="develop" /><category term="Refactoring" /><summary type="html">Refactoring (3)_method 정리 - 2nd</summary></entry><entry><title type="html">EOSIO_1</title><link href="https://apisapple.github.io/posts/EOSIO/" rel="alternate" type="text/html" title="EOSIO_1" /><published>2021-08-15T01:35:00+09:00</published><updated>2021-08-16T23:49:20+09:00</updated><id>https://apisapple.github.io/posts/EOSIO</id><content type="html" xml:base="https://apisapple.github.io/posts/EOSIO/">&lt;h1 id=&quot;eosio-지원환경-및-계정-권한과-합의-알고리즘&quot;&gt;EOSIO 지원환경 및 계정 권한과 합의 알고리즘&lt;/h1&gt;

&lt;p&gt;업무를 하며  Smart Contract에 대해서 공부를 하게 될 계기가 있었고 그 때 공부를 한 내용을 정리를 하고자 한다.&lt;/p&gt;

&lt;h2 id=&quot;eosio의-지원환경&quot;&gt;EOSIO의 지원환경&lt;/h2&gt;

&lt;p&gt;EOSIO의 지원환경은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Amazon Linux 2&lt;/li&gt;
  &lt;li&gt;CentOS 7&lt;/li&gt;
  &lt;li&gt;CentOS 7.x&lt;/li&gt;
  &lt;li&gt;CentOS 8&lt;/li&gt;
  &lt;li&gt;Ubuntu 16.04&lt;/li&gt;
  &lt;li&gt;Ubuntu 18.04&lt;/li&gt;
  &lt;li&gt;Ubuntu 20.04&lt;/li&gt;
  &lt;li&gt;MacOS 10.14 (Mojave)&lt;/li&gt;
  &lt;li&gt;MacOS 10.15 (Catalina)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;용어-정리&quot;&gt;용어 정리&lt;/h2&gt;

&lt;h3 id=&quot;block-producer&quot;&gt;Block Producer&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;EOSIO 환경에서 블록의 생성 및 블록의 유혀성을 검증해주는 특수한 노드&lt;/li&gt;
  &lt;li&gt;Block Producers는 EOSIO의 다른 노드들에 의해서 선출되는 방식으로 진행
(DPos 합의 알고리즘)&lt;/li&gt;
  &lt;li&gt;각각의 Block Producer는 EOSIO의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodeos&lt;/code&gt;를 활용해서 EOSIO의 인스턴스를 실행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;staking&quot;&gt;Staking&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;암호화폐의 일정한 양을 지분으로 고정시키는 행위&lt;/li&gt;
  &lt;li&gt;사용자는 자신이 가진 암호화폐를 블록체인 네트워크 운영에 활용할 수 있도록 맡기고, 그 대가로서 수익 보상을 받는 서비스를 말한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;staking-1&quot;&gt;Staking&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;EOS 코인 전송 및 거래가 불가능한 상태를 말한다.&lt;/li&gt;
  &lt;li&gt;Staking이 된 만큼 CPU와 네트워크의 자원을 활용 가능하다.
(1EOS당 30개의 BP에게 투표하는 것이 가능)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;unstaking&quot;&gt;Unstaking&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;EOS가 유동성을 가지고 있는 상태로서 EOS 코인 전송 및 거래가 가능한 상태를 말한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;eos의-권한-정보&quot;&gt;EOS의 권한 정보&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Producer Key
    &lt;ul&gt;
      &lt;li&gt;EOS에 블록을 생성할 때만 사용할 수 있으며 서명할 때 사용하는 키&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Owner Permission
    &lt;ul&gt;
      &lt;li&gt;Block producer의 슈퍼유저의 키&lt;/li&gt;
      &lt;li&gt;이 키를 활용하여 Active Key를 변경이 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Active Permission
    &lt;ul&gt;
      &lt;li&gt;Block Producer의 제어키&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://bensig.medium.com/how-to-setup-a-secure-eos-account-7f29f7f74fc8&quot;&gt;자세한 사용 예제&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;eosio의-합의-알고리즘&quot;&gt;EOSIO의 합의 알고리즘&lt;/h2&gt;

&lt;h3 id=&quot;eos의-합의-알고리즘&quot;&gt;EOS의 합의 알고리즘&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;1계층 (aBFT)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Block의 생성 및 검증하는 단계&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;**2계층 (DPos) **
    &lt;ul&gt;
      &lt;li&gt;Block Producer를 선정하고 Block을 생성하는 스케줄을 선정하는 단계&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기서 나오는 각각의 과정은 병렬적으로 진행이 된다.&lt;/p&gt;

&lt;p&gt;첫번째의 Schedule을 제외하고는 바로 병렬로 실행을 하는 것이 가능하다.&lt;/p&gt;

&lt;h3 id=&quot;1-계층--the-native-consensus-model-abft&quot;&gt;1 계층 : The Native Consensus Model (aBFT)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;선출이 된 Block Producer간의 수신 및 동기화된 블록을 최종적으로 합의하여 블록체인에 영구적으로 기록하는 계층을 말한다.&lt;/li&gt;
  &lt;li&gt;2계층의 결과로서 Producers Schedule을 사용하기 적절한 Producer가 올바르게 서명한 블록을 결정한다.&lt;/li&gt;
  &lt;li&gt;1계층에서는 이 블록이 현재의 Schedule Set에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2/3&lt;/code&gt;이상의 절대 다수가 검증한 내용인지 확인하는 검증 과정을 2번 거친다.&lt;/li&gt;
  &lt;li&gt;첫 번째 단계에서 &lt;strong&gt;LIB&lt;/strong&gt;(Last irreversible block)을 선별하고 난 후, 두번째 단계에서 이선별한 LIB를 최종적으로 확인을 한다.&lt;/li&gt;
  &lt;li&gt;1계층에서는 매 라운드가 시작이 될 때마다 Schedule에 변경 사항이 있는 지를 확인하고 있다면 신호를 보내 2계층으로 보낸다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*BvK-x6QTSGVnhrE9U_Ppog.png&quot; alt=&quot;BP 블록 생성부터 확정까지 합의 과정&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림에서 나오는 각 단계는 다음과 같은 동작을 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Propose
    &lt;ul&gt;
      &lt;li&gt;BP가 블록을 생성하고 다른 BP들에게 블록을 전송 (BroadCasting)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pre-Commit
    &lt;ul&gt;
      &lt;li&gt;생성이 된 블록을 BP들에게 전송하기 위해서 BP들끼리 통신&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Wait for + 2/3 Pre Commitment
    &lt;ul&gt;
      &lt;li&gt;Pre-Commit 단계에서 ⅔이상이 연결이 되기를 기다리는 단계&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Commit
    &lt;ul&gt;
      &lt;li&gt;Pre-Commit 단계에서 전체 BP 인원중에서 ⅔이상이 연결돼 블록을 검증하는 단계&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Finalize
    &lt;ul&gt;
      &lt;li&gt;블록 검증을 전체 ⅔이상이 합의하여 생성된 블록을 확정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-계층--delegated-proof-of-stakedpos&quot;&gt;2 계층 : Delegated Proof of Stake(DPoS)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;DPoS 계층은 토큰, 스테이킹(Staking), Voting / proxying, Vote decay, vote tallying, 
생산자 순위 및 인플레이션 보수의 개념을 도입한다.&lt;/li&gt;
  &lt;li&gt;블록 생성자를 투표하는 과정에서 생성된 순위를 기반으로 새로운 Producer Schedule을 생성하는 계층&lt;/li&gt;
  &lt;li&gt;DPoS 과정은 BP(Block Producer)가 블록을 생성하고 서명을 하는데 걸리는 시간 간격인 
일정 라운드에서 발생 (약 2분, 126초)&lt;/li&gt;
  &lt;li&gt;BP 당 총 6초 동안 진행이 되며, 
Producer의 라운드에서는 최대 12개의 블록을 제작 및 서명을 하는 것이 가능하다.&lt;/li&gt;
  &lt;li&gt;DPoS 계층은 WASM(웹 어셈블리) 스마트 계약에 의해 활성화가 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;eos의-dpos&quot;&gt;EOS의 DPOS&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;EOS의 block은 0.5초마다 block을 생성하는데 21명의 BP(Block Producer)가 RoundRobin 방식으로 블록을 생성&lt;/li&gt;
  &lt;li&gt;N명의 BP가 한 개의 블록들을 생성하면 i 번째 BP가 i 번째 block에 서명을 진행하는 방식&lt;/li&gt;
  &lt;li&gt;21명의 BP가 한 라운드 동안 동작하고 각 BP는 6개의 블록을 생성한다고 한다면
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;한 라운드는 (0.5 * 12) * 21 = 128초가 걸리고 12 * 21 = 252개의 블록이 생성&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.5 : 하나의 블록이 생성되는데 걸리는 시간 (s)&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6 : 한 명의 BP들이 6개의 블록을 생성&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;21 : 총 BP의 수&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;각 BP들이 자신들의 차례에 블록을 생성하고 생성된 블록을 검증하는 과정을 21명의 BP들이 진행&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="EOSIO" /><category term="Block chain" /><category term="EOSIO" /><summary type="html">EOSIO 지원환경 및 계정 권한과 합의 알고리즘</summary></entry><entry><title type="html">리팩토링(3)_method 정리</title><link href="https://apisapple.github.io/posts/Refactoring(3)/" rel="alternate" type="text/html" title="리팩토링(3)_method 정리" /><published>2021-06-28T21:00:00+09:00</published><updated>2021-06-28T21:00:00+09:00</updated><id>https://apisapple.github.io/posts/Refactoring(3)</id><content type="html" xml:base="https://apisapple.github.io/posts/Refactoring(3)/">&lt;h1 id=&quot;refactoring-3_method-정리---1st&quot;&gt;Refactoring (3)_method 정리 - 1st&lt;/h1&gt;

&lt;h3 id=&quot;1-매서드-추출-extract-method&quot;&gt;1. 매서드 추출 (Extract Method)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;어떤 코드를 그룹으로 묶어도 괜찮다고 판단이 된다면, 그 &lt;u&gt;코드를 빼내어 목적을 잘 나타내는 직관적인 이름의 method로 만들자.&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;방법&quot;&gt;방법&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;목적에 부합하는 이름의 새로운 method를 생성하자. 이 때 이름은 원리가 아닌 기능을 나타내는 이름으로 한다.
    &lt;ul&gt;
      &lt;li&gt;method로 빼낼 코드가 한 줄의 명령이나 함수 호출 같이 아주 간단한 것이라면 새 method명을 통해 그 코드의 기능(목적)을 더 잘 드러낼 수 있을 때만 추출을 실시하자. &lt;strong&gt;더 이해하기 쉬운 이름으로 추출하지 못할 경우 코드를 추출하지 말아야 한다.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;기존 method에서 빼낸 코드를 새로 생성한 method로 복사하자&lt;/li&gt;
  &lt;li&gt;빼낸 코드에서 기존 method의 모든 지역변수 참조를 찾자. 
그것들을 새로 생성한 method의 지역변수나 매개변수로 사용할 것이다.&lt;/li&gt;
  &lt;li&gt;빼낸 코드 안에서만 사용되는 임시변수가 있는지 파악해서 있다면 그것들을 새로 생성한 method안에 임시변수로 선언&lt;/li&gt;
  &lt;li&gt;추출 코드에 의해 변경되는 지역변수가 있는지 파악하자. 
만약 하나의 지역변수만 변경된다면 추출 코드를 method 호출처럼 취급할 수 있는지 알아내고, 그 결과를 변수에 대입할 수 있는지 알아내자. 이렇게 하기 까다롭거나 둘 이상의 지역변수가 변경될 때는 method를 추출하기 위해 먼저 임시변수 분리 등의 기법을 적용해야 할 수 있다. 임시변수를 제거하려면 &lt;u&gt;임시변수를 method 호출로 전환 기법&lt;/u&gt;을 적용하면 된다.&lt;/li&gt;
  &lt;li&gt;빼낸 코드에서 읽어들인 지역변수를 대상 method에 매개변수로 전달한다.&lt;/li&gt;
  &lt;li&gt;모든 지역변수 처리를 완료했으면 컴파일을 실시하자&lt;/li&gt;
  &lt;li&gt;원본 method안에 있는 빼낸 코드 부분을 새로 생성한 method 호출로 수정하자&lt;/li&gt;
  &lt;li&gt;컴파일 및 테스트를 진행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-매서드-내용-직접-삽입-inline-method&quot;&gt;2. 매서드 내용 직접 삽입 (Inline Method)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;u&gt;method 기능이 너무 단순해서 매서드명만 봐도 너무 뻔한 내용&lt;/u&gt;일 때,&lt;/strong&gt; 
&lt;strong&gt;그 method의 기능을 호출하는 method에 내용을 넣고 그 메서드는 삭제하자&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;방법-1&quot;&gt;방법&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;메서드가 재정의되어 있지 않은지 확인
    &lt;ul&gt;
      &lt;li&gt;그 메서드가 하위클래스에 재정의되어 있다면 없어진 매서드를 재정의하는 일이 생겨서는 안되기 때문에 메서드 내용 직접 삽입을 실시하지 않는 것이 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그 메서드를 호출하는 부분을 모두 확인&lt;/li&gt;
  &lt;li&gt;각 호출 부분을 메서드 내용으로 교체&lt;/li&gt;
  &lt;li&gt;테스트 진행&lt;/li&gt;
  &lt;li&gt;정의된 메서드를 삭제&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-임시변수-내용-직접-삽입-inline-temp&quot;&gt;3. 임시변수 내용 직접 삽입 (Inline Temp)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;간단한 수식을 대입받는 임시변수로 인해 다른 리팩토링 기법 적용이 힘들 땐,&lt;/strong&gt;
&lt;strong&gt;그 임시변수를 참조하는 부분을 전부 수식으로 치환하자&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// 간단한 예시&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* 리팩토링 이전 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;totalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* 리팩토링 이후 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;totalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;방법-2&quot;&gt;방법&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;대입문의 우변에 문제가 없는지 확인한다&lt;/li&gt;
  &lt;li&gt;문제가 없다면 임시변수를 final로 선언하고 컴파일을 진행
    &lt;ul&gt;
      &lt;li&gt;final로 선언함으로서 임시변수에는 값을 한 번만 대입할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그 임시변수를 참조하는 모든 부분을 찾아서 대입문 우변의 수식으로 변환&lt;/li&gt;
  &lt;li&gt;하나씩 수정을 할 때마다 컴파일 및 테스트 진행&lt;/li&gt;
  &lt;li&gt;임시변수 선언과 대입문을 삭제&lt;/li&gt;
  &lt;li&gt;컴파일 및 테스트 진행&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-임시변수를-매서드-호출로-전환-replace-temp-with-query&quot;&gt;4. 임시변수를 매서드 호출로 전환 (Replace Temp with Query)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;수식의 결과를 저장하는 임시변수가 있을 땐,&lt;/strong&gt;
&lt;strong&gt;그 수식을 빼내어 메서드로 만든 후, 임시변수 참조 부분을 전부 수식으로 교체하자.&lt;/strong&gt;
&lt;strong&gt;새로 만든 메서드는 다른 메서드에서도 호출이 가능하다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;/* 리팩토링 이전 */
double basePrice = itemCnt * itemPrice;
if(basePrice &amp;gt; 10000)
    return basePrice * 0.95;
else
    return basePrice * 0.98;



/* 리팩토링 이후 */
double basePrice() {
	return itemCnt * itemPrice;
}
if(basePrice() &amp;gt; 10000)
    return basePrice() * 0.95;
else
    return basePrice() * 0.98;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;동기&quot;&gt;동기&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;임시변수는 일시적이고 적용이 국소적인 범위로 제한이 된다. 임시변수는 자신이 속한 메서드의 안에서만
인식되므로, 그 임시변수에 접근하려면 코드는 길어지게 된다.
이럴 때, 임시변수를 매서드 호출로 수정하면 클래스 안 모든 메서드가 그 정보에 접근이 쉬워진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;방법-3&quot;&gt;방법&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;값이 한 번만 대입되는 임시변수를 확인
    &lt;ul&gt;
      &lt;li&gt;값이 여러 번 대입되는 임시변수가 있다면 임시변수 분리 기법 실시를 고려해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그 임시변수를 final로 선언
    &lt;ul&gt;
      &lt;li&gt;임시변수엔 값을 한 번만 대입할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;컴파일을 실시&lt;/li&gt;
  &lt;li&gt;대입문 우변을 빼내어 메서드로 변환
    &lt;ul&gt;
      &lt;li&gt;처음엔 메서드를 private로 선언. 그 후 더 여러 곳에서 사용하게 되면 접근 제한을 완화한다.&lt;/li&gt;
      &lt;li&gt;추출 메서드에 문제는 없는지 확인을 해야한다. 
만약 &lt;u&gt;**객체 변경 등의 문제가 있다면 상태 변경 메서드와 값 반환 메서드를 분리 기법을 실시.**&lt;/u&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;컴파일 및 테스트 진행&lt;/li&gt;
  &lt;li&gt;임시변수를 대상으로 임시변수 내용을 직접 삽입 기법을 실시&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;참고자료&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;리팩토링_코드 품질을 개선하는 객체지향 사고법 _마틴파울러 저&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="Refactoring" /><category term="develop" /><category term="Refactoring" /><summary type="html">Refactoring (3)_method 정리 - 1st</summary></entry><entry><title type="html">리팩토링(2)</title><link href="https://apisapple.github.io/posts/Refactoring(2)/" rel="alternate" type="text/html" title="리팩토링(2)" /><published>2021-05-29T19:00:00+09:00</published><updated>2021-05-29T19:00:00+09:00</updated><id>https://apisapple.github.io/posts/Refactoring(2)</id><content type="html" xml:base="https://apisapple.github.io/posts/Refactoring(2)/">&lt;h1 id=&quot;refactoring-2&quot;&gt;Refactoring (2)&lt;/h1&gt;

&lt;h2 id=&quot;리팩토링과-설계&quot;&gt;리팩토링과 설계&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;사전 설계 없이 리팩토링만 하는 방법도 문제는 없지만, 작업에서 가장 효율적인 방법은 아님&lt;/li&gt;
  &lt;li&gt;리팩토링을 통해 사전 설계 과정에서 완벽한 솔루션을 찾을 필요가 없어진다.
    &lt;ul&gt;
      &lt;li&gt;즉, 설계가 단순해지는 효과가 나타난다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;리팩토링과-성능&quot;&gt;리팩토링과 성능&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;빠른 SW를 작성할 수 있는 일반적인 방법
    &lt;ul&gt;
      &lt;li&gt;철저한 시간 분배&lt;/li&gt;
      &lt;li&gt;성능에 대해서 꾸준한 괌신을 갖도록 하는 것&lt;/li&gt;
      &lt;li&gt;개발 절차 중에는 잘게 쪼개서 사용&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;즉, 리팩토링은 단기적으로는 SW가 느려질 수 있지만 최적화를 통해 결과적으로 SW 개발이 더욱 빨라진다.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;리팩토링을-진행해야-하는-상황&quot;&gt;리팩토링을 진행해야 하는 상황&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;책에서는 코드의 구린내라는 말로 표현을 하고 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;중복 코드(Duplicated Code)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;똑간은 코드 구조가 2군데 이상이 있을 때, 그 부분을 하나로 통일할 필요가 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;장황한 매서드 (Long Method)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;프로시저가 길수록 이해하기 어렵기 때문에 적절한 매서드명을 통해서 매서드를 나누어 표현하도록 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;방대한 클래스&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;클래스 안의 일부 변수가 접두어나 접미어가 같다면 하나의 클래스로 추출하는게 좋다.&lt;/li&gt;
      &lt;li&gt;모듈 추출을 실시할 수도 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;과다한 매개변수&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;필요한 데이터가 없을 때는 다른 객체에서 요청하도록 한다.
        &lt;ul&gt;
          &lt;li&gt;매서드가 필요로 하는 데이터를 클래스에서 호출&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;수정의 산발&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터를 수정할 때, 분명한 위치로 가서 바로 수정이 가능하도록 한다.
        &lt;ul&gt;
          &lt;li&gt;이런 경우 여러 개의 변형 객체로 분리가 필요&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;기능의 산재&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;수정 작업을 할 때마다 여러 클래스에서 내용을 고쳐야 한다면 하나의 클래스로 뭉치는 작업이 필요&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;잘못된 소속&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;한 메서드가 여러 클래스에 들어있는 기능을 이용하게 될 경우, 
매서드가 접근하는 데이터가 가장 많은 클래스로 내용을 옮기도록 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 뭉치&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;동일한 3 ~ 4개의 데이터 항목이 여러 위치에 몰려있는 경우, 이를 객체로 묶어 관리가 필요하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;강박적 기본 타입 적용&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;프로그래밍 환경을 구성하는 데이터 종류
        &lt;ul&gt;
          &lt;li&gt;Record 타입(Integer, Long)&lt;/li&gt;
          &lt;li&gt;기본 타입(Int, double)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Switch 문&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;switch 문을 사용하게 된다면 반드시 중복이 발생&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;평행 상속 계층&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;평행 상속 계층의 중복 코드를 제거하기 위해서는 한 상속 계층의 인스턴스가 다른 인스턴스를 참조하게 만든다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;직무 유기 클래스(Lazy Class)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;들어가는 비용만큼 기능을 수행하지 못하는 비효율적인 클래스를 없애야 한다.&lt;/li&gt;
      &lt;li&gt;직무 유기 클래스
        &lt;ul&gt;
          &lt;li&gt;리팩토링으로 인해 기능이 축소된 클래스&lt;/li&gt;
          &lt;li&gt;수정을 실시하지 않아 불필요해진 클래스&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;막연한 범용 코드&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;테스트 케이스에서만 사용되는 코드들은 과감하게 지울 수 있어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;임시 필드(Temporary Field)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;떠돌이 임시 변수들을 관리하기 위해 관련 코드를 전부 넣어 작성해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;메시지 체인(Message Chains)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;연쇄적인 요청이 발생하면서 생기는 문제점&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;과잉 중개 매서드&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;일부 매서드에 큰 기능이 없는 경우, 매서드의 내용을 직접 삽입하는 것이 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;지나친 관여&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;서로 지나치게 관여하는 클래스의 경우는 이를 분리해 줄 필요가 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인터페이스가 다른 대용 클래스&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;기능은 같은데 시그니처가 다른 매서드에는 매서드 이름의 변경을 실시해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;미흡한 라이브러리 클래스&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;외부 클래스에 매서드 추가 기법을 실시 후, 부가 기능이 많을 때, 국소적 상속확장 클래스 기법을 실시한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 클래스&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터 클래스
        &lt;ul&gt;
          &lt;li&gt;필드의 읽기, 쓰기 매서드만 있는 클래스&lt;/li&gt;
          &lt;li&gt;public으로 선언되어 있다면 캡슐화를 진행하자&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;방치된 상속물&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;상속받은 매서드나 데이터가 하위클래스에서 더 이상 쓰이지 않거나 필요로 하지 않는 경우,&lt;/p&gt;

        &lt;p&gt;사용되지 않는 모든 메서드를 형제 클래스에 몰아넣어야 한다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;불필요한 주석&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;참고자료&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;리팩토링_코드 품질을 개선하는 객체지향 사고법 _마틴파울러 저&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="Refactoring" /><category term="develop" /><category term="Refactoring" /><summary type="html">Refactoring (2)</summary></entry><entry><title type="html">M과 M(3)[백준 15651번]</title><link href="https://apisapple.github.io/posts/%EB%B0%B1%EC%A4%80_N%EA%B3%BCM(3)/" rel="alternate" type="text/html" title="M과 M(3)[백준 15651번]" /><published>2021-05-10T00:35:00+09:00</published><updated>2021-05-10T00:40:31+09:00</updated><id>https://apisapple.github.io/posts/%EB%B0%B1%EC%A4%80_N%EA%B3%BCM(3)</id><content type="html" xml:base="https://apisapple.github.io/posts/%EB%B0%B1%EC%A4%80_N%EA%B3%BCM(3)/">&lt;h1 id=&quot;n과-m3-백준-15651&quot;&gt;N과 M(3) [백준 15651]&lt;/h1&gt;

&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;

&lt;h4 id=&quot;문제링크&quot;&gt;문제링크&lt;/h4&gt;

&lt;p&gt;https://www.acmicpc.net/problem/15651&lt;/p&gt;

&lt;h4 id=&quot;문제-내용&quot;&gt;문제 내용&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.
    &lt;ul&gt;
      &lt;li&gt;1부터 N까지 자연수 중에서 M개를 고른 수열&lt;/li&gt;
      &lt;li&gt;같은 수를 여러 번 골라도 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;입력&quot;&gt;입력&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 7)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;출력&quot;&gt;출력&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.&lt;/li&gt;
  &lt;li&gt;수열은 사전 순으로 증가하는 순서로 출력해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;

&lt;h4 id=&quot;풀이-과정&quot;&gt;풀이 과정&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;글에서 설명하는 과정을 순서대로 따라서 짠다.&lt;/li&gt;
  &lt;li&gt;회전상태를 전부 체크한 후, 하나씩 회전하기 시작한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;소스코드&quot;&gt;소스코드&lt;/h4&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;vector&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define MAX 7
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dept&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dept&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_with_stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;numberList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;문제-푼-소감&quot;&gt;문제 푼 소감&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;endl 때문에 시간초과가 계속 나와서 한참을 삽질했던 문제&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="Algorithm" /><category term="acmicpc" /><category term="DFS" /><category term="백준" /><summary type="html">N과 M(3) [백준 15651]</summary></entry><entry><title type="html">리팩토링(1)</title><link href="https://apisapple.github.io/posts/Refactoring(1)/" rel="alternate" type="text/html" title="리팩토링(1)" /><published>2021-05-05T18:00:00+09:00</published><updated>2021-05-05T18:00:00+09:00</updated><id>https://apisapple.github.io/posts/Refactoring(1)</id><content type="html" xml:base="https://apisapple.github.io/posts/Refactoring(1)/">&lt;h1 id=&quot;refactoring-1&quot;&gt;Refactoring (1)&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;최근 업무를 하며 기존의 레거시 코드를 수정해야만 하는 일이 생겼습니다.
기존의 코드를 보면서 코드를 깔끔하게 작성하지 않았을 때, 수정하기 어렵고 다른 사람의 코드를 보았을 때 이해하기 어렵다는 것을 느껴 코드를 분리하고 클래스를 정리하는 등의 작업을 하였습니다.&lt;/p&gt;

  &lt;p&gt;그러던 중, 최근 토스 컨퍼런스에서 Clean Code와 관련된 발표 내용을 듣게 되면서 리팩토링을 제대로 공부를 해보고 싶다는 생각에 공부를 시작했습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;리팩토링refactoring이란-무엇일까&quot;&gt;리팩토링(Refactoring)이란 무엇일까?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;겉으로 드러나는 기능은 그대로 두면서,&lt;/strong&gt; 
&lt;strong&gt;알아보기 쉽고 수정하기 간편하게 SW의 내부를 수정하는 과정&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;코드를 작성한 후, 설계를 향상 시키는 작업&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;리팩토링을-해야하는-이유는-뭘까&quot;&gt;리팩토링을 해야하는 이유는 뭘까?&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;SW 설계가 개선되기 때문에
    &lt;ul&gt;
      &lt;li&gt;기능이 같은 코드가 여기저기 중복되어 있어 코드만 길어지는 것을 방지&lt;/li&gt;
      &lt;li&gt;코드 수정이 편리해짐&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SW를 이해하기 쉬워지기 때문에
    &lt;ul&gt;
      &lt;li&gt;다른 개발자가 이해하기 쉬워지기 때문에 효율성이 증대&lt;/li&gt;
      &lt;li&gt;낯선 코드를 이해하기 쉬워지면서, 기능파악이 편리해짐&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;프로그래밍의 속도가 빨라지기 때문에
    &lt;ul&gt;
      &lt;li&gt;코드를 신속하게 개발하는 것이 가능해 짐&lt;/li&gt;
      &lt;li&gt;다른 사람에게 물어보지 않아도 알 수 있기 때문에 유지보수의 시간이 단축되는 효과&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;리팩토링은-언제-진행해야-할까&quot;&gt;리팩토링은 언제 진행해야 할까?&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;같은 작업을 3번 이상 반복해서 할 때&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;기능을 추가할 때&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;기존에 클린했던 코드라도 기능을 추가함으로써 코드가 더러워질 수 있다.
        &lt;ul&gt;
          &lt;li&gt;하나의 목적인 코드는 뭉쳐 두기&lt;/li&gt;
          &lt;li&gt;함수가 한 가지 일만 하도록 쪼개기&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;기존에 코드가 이해하기 어려워 기능을 추가하기 힘들 때&lt;/li&gt;
    &lt;/ul&gt;

    &lt;blockquote&gt;
      &lt;p&gt;원하는 로직을 빠르게 찾기 위해서 고려해야할 사항&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;응집도
          &lt;ul&gt;
            &lt;li&gt;하나의 목적을 가진 코드가 흩뿌려지지 않도록 해야한다.&lt;/li&gt;
            &lt;li&gt;당장 몰라도 되는 데이터는 뭉치고, 핵심 정보는 분리&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;단일책임
          &lt;ul&gt;
            &lt;li&gt;함수가 여러 가지 일을 하고 있다.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;추상화
          &lt;ul&gt;
            &lt;li&gt;함수의 세부구현 단계가 제각각으로 되어 있다.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;버그를 수정할 때&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;리팩토링을 통해 코드를 이해하기 쉽게 만들어 버그를 수정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;코드를 검수할 때&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;리팩토링을-하면-안되는-상황&quot;&gt;리팩토링을 하면 안되는 상황&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;코드를 처음부터 새로 작성해야 할 때&lt;/li&gt;
  &lt;li&gt;프로그램 개발 기간이 임박한 상황일 때&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;참고자료&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;리팩토링_코드 품질을 개선하는 객체지향 사고법 _마틴파울러 저&lt;/li&gt;
    &lt;li&gt;토스 컨퍼런스 발표자료_ 실무에서 바로 쓰는 Frontend Clean Code_진유림&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="Refactoring" /><category term="develop" /><category term="Refactoring" /><summary type="html">Refactoring (1)</summary></entry><entry><title type="html">정보보호기사_운영체제 이해 및 관리</title><link href="https://apisapple.github.io/posts/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EC%9D%B4%ED%95%B4-%EB%B0%8F-%EA%B4%80%EB%A6%AC/" rel="alternate" type="text/html" title="정보보호기사_운영체제 이해 및 관리" /><published>2021-02-01T20:00:00+09:00</published><updated>2021-02-01T20:00:00+09:00</updated><id>https://apisapple.github.io/posts/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EC%9D%B4%ED%95%B4-%EB%B0%8F-%EA%B4%80%EB%A6%AC</id><content type="html" xml:base="https://apisapple.github.io/posts/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EC%9D%B4%ED%95%B4-%EB%B0%8F-%EA%B4%80%EB%A6%AC/">&lt;h1 id=&quot;정보화사회의-정보보호&quot;&gt;정보화사회의 정보보호&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;운영체제-이해-및-관리&quot;&gt;운영체제 이해 및 관리&lt;/h1&gt;

&lt;h2 id=&quot;cpucentral-processing-unit-중앙처리장치의-구조적-이해&quot;&gt;CPU(Central Processing Unit, 중앙처리장치)의 구조적 이해&lt;/h2&gt;

&lt;h3 id=&quot;cpu의-구조-이해&quot;&gt;CPU의 구조 이해&lt;/h3&gt;

&lt;h4 id=&quot;cpu-개념&quot;&gt;CPU 개념&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;입력장치로부터 자료를 받아 연산하고 그 결과를 출력장치로 보내는 일련의 과정을 제어 · 조정하는 핵심장치&lt;/li&gt;
  &lt;li&gt;사람의 두뇌에 해당&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cpu의-구성요소&quot;&gt;CPU의 구성요소&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구성요소&lt;/th&gt;
      &lt;th&gt;상세 기능&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ALU (연산장치)&lt;/td&gt;
      &lt;td&gt;각종 산술연산과 논리연산들을 수행하는 회로&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Register (레지스터)&lt;/td&gt;
      &lt;td&gt;CPU 내부의 소규모 데이터나 중간 결과를 임시 기억해 두는 고속의 기억장치&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Control Unit (제어장치)&lt;/td&gt;
      &lt;td&gt;프로그램의 코드를 해석하고 실행하기 위한 제어 신호들을 발생시킴&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;내부 CPU 버스&lt;/td&gt;
      &lt;td&gt;ALU와 레지스터 간의 데이터 이동을 위한 경로&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;레지스터register-종류&quot;&gt;레지스터(Register) 종류&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;종류&lt;/th&gt;
      &lt;th&gt;주요 기능&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;PC (Program Counter)&lt;/td&gt;
      &lt;td&gt;다음에 수행할 명령어가 저장된 주기억장치 번지를 지정&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MAR (Memory Address Register)&lt;/td&gt;
      &lt;td&gt;주기억장치에 접근하기 위한 주기억장치의 번지를 기억&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MBR (Memory Buffer Register)&lt;/td&gt;
      &lt;td&gt;주기억장치에 입·출력할 자료를 기억하는 레지스터&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IR (Instruction Register)&lt;/td&gt;
      &lt;td&gt;주기억장치에서 인출한 명령코드를 기억하는 레지스터&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;버스-시스템-bus-system&quot;&gt;버스 시스템 (Bus System)&lt;/h3&gt;

&lt;h4 id=&quot;버스bus의-정의&quot;&gt;버스(Bus)의 정의&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;버스(Bus)는 시스템에 많은 장치를 공유하며 데이터, 주소, 제어 정보를 전달하는 전송 라인&lt;/li&gt;
  &lt;li&gt;한정된 자원이므로 버스를 획득하기 위한 경합이 많이 발생하는 장치&lt;/li&gt;
  &lt;li&gt;사용하는 방식에 따라 입출력 성능에 영향을 줌&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;버스bus-종류&quot;&gt;버스(Bus) 종류&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;종류&lt;/th&gt;
      &lt;th&gt;내용&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;데이터 버스&lt;/td&gt;
      &lt;td&gt;시스템 컴포넌트 간 처리 데이터를 전송하는 라인&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;주소 버스&lt;/td&gt;
      &lt;td&gt;기억장소의 위치 혹은 장치 식별을 저장하기 위한 라인&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;제어 버스&lt;/td&gt;
      &lt;td&gt;CPU와 기억장치 또는 I/O 장치 사이의 제어 신호를 전송하는 라인&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;cpu의-명령-실행-주기instruction-cycle&quot;&gt;CPU의 명령 실행 주기(Instruction Cycle)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;하나의 명령어 실행이 끝난 후, 다음 명령어의 수행이 시작되어 끝나는 시간&lt;/li&gt;
  &lt;li&gt;패치(fetch), 간접(indirect), 실행(execution), 인터럽트(interrupt)로 구성&lt;/li&gt;
  &lt;li&gt;실행 주기는 2단계, 4단계, 5단계 사이클로 구분된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;단계&lt;/th&gt;
      &lt;th&gt;동작 설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;인출 &lt;br /&gt;(Instruction Fetch)&lt;/td&gt;
      &lt;td&gt;인출단계는 메모리에서 데이터를 로드하여 CPU에 있는 레지스터에 적재하는 과정&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;간접&lt;br /&gt;(Indirect)&lt;/td&gt;
      &lt;td&gt;메모리를 참조할 때 간접주소 방식을 사용하는 경우에 실행&lt;br /&gt;간접주소란 CPU가 메모리를 참조했을 때 데이터가 존재하는 것이 아니라 메모리에 주소가 존재하여 메모리 내에서 한번 더 조회해서 데이터를 얻는 것&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;실행&lt;br /&gt;(Execution)&lt;/td&gt;
      &lt;td&gt;명령과 데이터로 CPU가 산술 및 논리연산을 수행하는 것&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;인터럽트&lt;br /&gt;(Interrupt)&lt;/td&gt;
      &lt;td&gt;컴퓨터 작동 중 예기치 않은 문제가 발생한 경우라도 업무 처리가 계속될 수 있도록  하는&lt;br /&gt;컴퓨터 운영체제의 한 기능으로, 크게 하드웨어 인터럽트와 소프트웨어 인터럽트로 나눔&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;메모리-시스템-memory-system&quot;&gt;메모리 시스템 (Memory System)&lt;/h2&gt;

&lt;h3 id=&quot;기억장치-계층구조-memory-hierachy&quot;&gt;기억장치 계층구조 (Memory Hierachy)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;크기, 속도, 가격당 성능에 따라 분류된 기억장치를 계층적으로 구성함으로써 평균 기억장치 액세스 속도는 높이고 가격 대비 성능비도 적절히 유지하기 위한 설계 아키텍처&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;메모리-계층구조의-이유&quot;&gt;메모리 계층구조의 이유&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;액세스 속도가 높아질수록 비트당 가격도 높아진다.&lt;/li&gt;
  &lt;li&gt;용량이 커질수록 비트당 가격은 낮아진다.&lt;/li&gt;
  &lt;li&gt;용량이 커질수록 액세스 속도는 낮아진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;캐시-메모리-cache-memory&quot;&gt;캐시 메모리 (Cache Memory)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;CPU와 주기억장치(Memory)의 속도 차이를 극복하기 위해서 CPU와 주기억장치 사이에 존재하는 고속의 
버퍼 메모리&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;캐시-메모리cache-memory-정의&quot;&gt;캐시 메모리(Cache Memory) 정의&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;중앙처리장치가 읽어 들인 데이터들로 채워지는 버퍼 형태의 고속 기억장치이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;캐시-메모리-사상mapping-방식&quot;&gt;캐시 메모리 사상(Mapping) 방식&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;직접사상 (Direct mapping)
    &lt;ul&gt;
      &lt;li&gt;Main Memory를 여러 구역으로 분할하여 Cache 슬롯과 매핑&lt;/li&gt;
      &lt;li&gt;장점
        &lt;ul&gt;
          &lt;li&gt;매핑 절차가 단순하고 신속하게 처리&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;단점
        &lt;ul&gt;
          &lt;li&gt;높은 캐시 미스율&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;연관사상(Associate Mapping)
    &lt;ul&gt;
      &lt;li&gt;Main Memory의 각 블록이 Cache의 어느 슬롯이든 적재 가능&lt;/li&gt;
      &lt;li&gt;장점
        &lt;ul&gt;
          &lt;li&gt;지역성 높은 접근 시 캐시 적중률 높음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;단점
        &lt;ul&gt;
          &lt;li&gt;구현 하드웨어가 복잡하여 구현 비용 상승&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;집합 연관사상(Set Associate Mapping)
    &lt;ul&gt;
      &lt;li&gt;직접사상 / 연관사상 절출 방식으로 캐시와 메모리가 M 대 1로 대응한다.&lt;/li&gt;
      &lt;li&gt;장점
        &lt;ul&gt;
          &lt;li&gt;직접사상과 연관사상의 장점 수용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;단점
        &lt;ul&gt;
          &lt;li&gt;캐시 Fin/Fout 발생 증가, 구현 비용이 많이 듦&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;캐시-메모리-관리-방식&quot;&gt;캐시 메모리 관리 방식&lt;/h3&gt;

&lt;h4 id=&quot;캐시-메모리-교체-알고리즘&quot;&gt;캐시 메모리 교체 알고리즘&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;종류&lt;/th&gt;
      &lt;th&gt;세부내용&lt;/th&gt;
      &lt;th&gt;특징&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Random&lt;/td&gt;
      &lt;td&gt;교체될 Page를 임의 선정&lt;/td&gt;
      &lt;td&gt;Overhaed가 적음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FIFO&lt;/td&gt;
      &lt;td&gt;가장 오래 있었던 Page 교체&lt;/td&gt;
      &lt;td&gt;자주 사용되는 Page 교체 우려&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LFU&lt;/td&gt;
      &lt;td&gt;사용 횟수가 가장 적은 Page 교체&lt;/td&gt;
      &lt;td&gt;최근 적재된 Page가 교체될 우려&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LRU&lt;/td&gt;
      &lt;td&gt;가장 오랫동안 사용되지 않은 Page 교체&lt;/td&gt;
      &lt;td&gt;Time stamping에 의한 overhead 존재&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Optimal&lt;/td&gt;
      &lt;td&gt;향후 가장 참조되지 않을 Page 교체&lt;/td&gt;
      &lt;td&gt;실현 불가&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NUR&lt;/td&gt;
      &lt;td&gt;참조 비트와 수정 비트로 미사용 Page 교체&lt;/td&gt;
      &lt;td&gt;최근 사용되지 않은 페이지 교체&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SCR&lt;/td&gt;
      &lt;td&gt;최초 참조 비트 1로 셋, 1인 경우 0 셋, 0인 경우 교체&lt;/td&gt;
      &lt;td&gt;기회를 한 번 더 줌&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;페이지-교체-관리-시-문제점&quot;&gt;페이지 교체 관리 시 문제점&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;문제점&lt;/th&gt;
      &lt;th&gt;세부 내용&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Page Fault 발생&lt;/td&gt;
      &lt;td&gt;기억장치에 적재되지 않은 Page를 사용하려 할 때 Page Fault 발생&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Demand Paging&lt;/td&gt;
      &lt;td&gt;요구될 때에만 Process가 Page를 적재하는 방식&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thrashing 발생&lt;/td&gt;
      &lt;td&gt;Page 부재가 너무 빈번하게 발생하여 CPU가 Process 수행보다 Page 교체에 더 많은 시간을 소요하는 비정상적인 현상&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;페이지-교체-관리-문제-해결-방안&quot;&gt;페이지 교체 관리 문제 해결 방안&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;종류&lt;/th&gt;
      &lt;th&gt;세부 내용&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Load Control&lt;/td&gt;
      &lt;td&gt;일정 시간 동안 새로운 프로세서가 생성되는 것을 지연시키고 Suspend Queue에 대기시켜서 Thrashing 현상을 감소시킴&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Locality&lt;/td&gt;
      &lt;td&gt;시간과 공간 지역성을 집중적으로 참조함&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Working Set&lt;/td&gt;
      &lt;td&gt;일정 시간 동안 참조되는 페이지 집합을 주기억장치에 유지&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PFF&lt;/td&gt;
      &lt;td&gt;Process의 Page Fault 빈도에 따라 Residence set을 조정&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><category term="자격증" /><category term="정보보호기사" /><category term="자격증" /><category term="정보보호기사" /><summary type="html">정보화사회의 정보보호</summary></entry><entry><title type="html">정보보호기사_정보보호관리의 개념 1</title><link href="https://apisapple.github.io/posts/%EC%A0%95%EB%B3%B4%EB%B3%B4%ED%98%B8%EA%B4%80%EB%A6%AC%EC%9D%98-%EA%B0%9C%EB%85%90/" rel="alternate" type="text/html" title="정보보호기사_정보보호관리의 개념 1" /><published>2020-12-30T21:00:00+09:00</published><updated>2020-12-31T01:41:11+09:00</updated><id>https://apisapple.github.io/posts/%EC%A0%95%EB%B3%B4%EB%B3%B4%ED%98%B8%EA%B4%80%EB%A6%AC%EC%9D%98-%EA%B0%9C%EB%85%90</id><content type="html" xml:base="https://apisapple.github.io/posts/%EC%A0%95%EB%B3%B4%EB%B3%B4%ED%98%B8%EA%B4%80%EB%A6%AC%EC%9D%98-%EA%B0%9C%EB%85%90/">&lt;h1 id=&quot;정보화사회의-정보보호&quot;&gt;정보화사회의 정보보호&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;정보사회의-특성과-정보화-역기능&quot;&gt;정보사회의 특성과 정보화 역기능&lt;/h2&gt;

&lt;h4 id=&quot;정보사회의-특성&quot;&gt;정보사회의 특성&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;인터넷 확산과 전자상거래로 단일 생활권으로 압축&lt;/li&gt;
  &lt;li&gt;전자메일 및 인터넷을 통해 직접 방문없이 이체, 주식매매 등을 할 수 있음&lt;/li&gt;
  &lt;li&gt;기존의 전쟁개념에서 자동화된 지휘통제시스템과 바이러스를 사용한 사이버 전쟁 개념이 복합된 모습으로 변화&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;정보화의-역기능&quot;&gt;정보화의 역기능&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;개인의 프라이버시 침해, 각종 컴퓨터 범죄 행위의 기승, 정보시스템의 파괴에 의한 사회마비 등&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;사이버-환경의-특징&quot;&gt;사이버 환경의 특징&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;비대면성&lt;/li&gt;
  &lt;li&gt;익명성&lt;/li&gt;
  &lt;li&gt;시간 및 공간 운영의 무제한성&lt;/li&gt;
  &lt;li&gt;무제한적인 정보 및 신속한 전송&lt;/li&gt;
  &lt;li&gt;미래의 범죄 및 전쟁 공간&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;최근-사이버-공격의-특징&quot;&gt;최근 사이버 공격의 특징&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;공격 기술의 지능화 및 고도화&lt;/li&gt;
  &lt;li&gt;사이버 공격 전파 경로의 다원화&lt;/li&gt;
  &lt;li&gt;사이버 공격의 초고속화 및 초단기화&lt;/li&gt;
  &lt;li&gt;사이버 공격의 분산화 및 에이션트화&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정보보호&quot;&gt;정보보호&lt;/h2&gt;

&lt;h4 id=&quot;정의&quot;&gt;정의&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;정보보호(Information Security)의 사전적 의미
    &lt;ul&gt;
      &lt;li&gt;정보의 수집, 가공, 저장, 검색, 송신, 수신 중에 발생하는 정보의 훼손, 변조, 유출 등을 방지하기 위한
관리적, 기술적 수단, 또는 그러한 수단으로 이루어지는 행위&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;정보보호는 &lt;strong&gt;기밀성, 무결성, 가용성, 인증성 및 부인방지를 보장하기 위해 기술적, 물리적, 관리적 보호대책을 간구하는 것&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;정보의-가용성과-안정성&quot;&gt;정보의 가용성과 안정성&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;정보의 가용성과 보안 측면에서 보면, 정보보호란 &lt;strong&gt;정보의 활용과 정보의 통제 사이에서 균형감각을 갖는 행위&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;필요로 하는 사용 가능한 자원을 쉽게 얻을 수 있으면서도 정보에 위협이 되는 요소를 최소화하는 균형점을 찾는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;h5 id=&quot;가장-쉬운-침투-방법-선택-원리-prinaiple-of-penetration&quot;&gt;가장 쉬운 침투 방법 선택 원리( &lt;strong&gt;prinaiple of penetration&lt;/strong&gt;)&lt;/h5&gt;

  &lt;ul&gt;
    &lt;li&gt;침입자는 가능한 모든 침투 수단을 이용할 것이다.
침투는 가장 분명한 수단을 이용해서 일어나는 것이 아니다. 
따라서 침투에 대한 강력한 대비책이 있다면 일반적으로 쉽게 이루어지지 않을 것이다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;h5 id=&quot;nist의-컴퓨터-보안-정의&quot;&gt;NIST의 컴퓨터 보안 정의&lt;/h5&gt;

  &lt;ul&gt;
    &lt;li&gt;정보시스템 지원 ( 하드웨어, 소프트웨어, 펌웨어, 정보/데이터, 통신 )의 무결성, 가용성, 기밀성을 보전하고자 하는 목표 
  달성을 위해 자동화된 정보시스템에 제공하는 보호 ( 컴퓨터 보안에 있어서 가장 핵심이 되는 3가지 주요 목표 제시 )&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;정보보호의-목표&quot;&gt;정보보호의 목표&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h5 id=&quot;기밀성confidential&quot;&gt;기밀성(Confidential)&lt;/h5&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;오직 인가된 사람, 인가된 프로세스, 인가된 시스템만이 알 필요성(Need-to-know)에  근거하여 시스템에 접근해야 한다는 원칙&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;기밀성은 데이터 처리의 모든 접속점에서 필요한 수준의 비밀 엄수가 강제되도록 하고, 허가받지 않은 정보 유출을 예방하는 것을 보장한다. 이러한 수준의 기밀성은 데이터가 네트워크 내의 시스템과 장비에 보관되어 있을 때, 데이터가 전송될 때, 데이터가 목적지에 도달한 이후에도 유지가 되어야 한다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;기밀성을 보장하기 위한 보안 기술에는 접근 제어, 암호화&lt;/strong&gt; 등이 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h5 id=&quot;무결성integrity&quot;&gt;무결성(Integrity)&lt;/h5&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;네트워크를 통하여 송수신되는 정보의 내용이 불법적으로 생성 또는 변경되거나 삭제 되지 않도록 보호되어야 하는 성질&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;무결성 왜곡이 항상 악의적인 행동의 결과로 나타나는 것은 아니다.
전력차단과 같은 시스템 중단이 정보에 예상치 못한 변형을 일으킬 수 있다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;무결성을 보장하기 위한 보안 기술에는 접근 제어, 메시지 인증 등&lt;/strong&gt;이 있으며, 정보가 이미 변경되었거나 변경 위험이 있을 때에는 이러한 변경을 탐지하여 복구할 수 있는 &lt;strong&gt;침입 탐지, 백업 등의 기술&lt;/strong&gt;이 필요하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h5 id=&quot;가용성availability&quot;&gt;가용성(Availability)&lt;/h5&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;시스템이 지체 없이 동작하도록 하고, 합법적 사용자가 서비스 사용을 거절당하지 않도록 하는 것&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;정보는 지속적으로 변화하며, 이는 인가된 자가 접근할 수 있어야 함을 의미
&lt;strong&gt;정보의 비가용성은 조직에 있어 기밀성이나 무결성의 부족만큼이나 해롭다.&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;가용성을 확보하기 위해서는 &lt;strong&gt;데이터의 백업, 중복성의 유지, 물리적 위협요소로부터의 보호 등의 보안 기술을 적용&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;h5 id=&quot;cia-triad--보안의-3요소&quot;&gt;CIA Triad =&amp;gt; 보안의 3요소&lt;/h5&gt;

  &lt;ul&gt;
    &lt;li&gt;기밀성(Confidential)&lt;/li&gt;
    &lt;li&gt;무결성(Integrity)&lt;/li&gt;
    &lt;li&gt;가용성(Availability)&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;정보를 안전하게 보호하기 위해서는 비인가된 접근으로부터 안전하고 [기밀성],
비인가된 변경으로부터 보호되어야 하며[무결성],
필요할 때 권한이 있는 사용자가 이용할 수 있어야 한다.[가용성]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;인증성(인증, Authenticity, Authentication)
    &lt;ul&gt;
      &lt;li&gt;진짜라는 성질을 확인할 수 있고, 확인 및 신뢰할 수 있다는 것을 의미
그리고 전송 메시지, 메시지 출처 유효성의 확신을 의미한다.&lt;/li&gt;
      &lt;li&gt;사용자가 정말 그 사용자인지 시스템에 도착한 자료가 정말로 신뢰할 수 있는 출처에서 온 것인지를 확인 할 수 있는 것을 말한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;책임추정성(책임성, Accountability)
    &lt;ul&gt;
      &lt;li&gt;보안 목적에는 개체의 행동을 유일하게 추적해서 찾아낼 수 있어야 한다는 사항이 포함되어야 한다. 
부인 봉쇄, 억제, 결함 분리, 침입 탐지 예방, 사후 복구와 법적인 조치 등이 포함된다.&lt;/li&gt;
      &lt;li&gt;진정으로 안전한 시스템을 만드는 것은 불가능하기 떄문에, 보안 침해에 대한 책임이 있는 곳까지 추적할 수 있어야만 한다.&lt;/li&gt;
      &lt;li&gt;시스테은 반드시 이들의 활동 상황을 기록하고, 나중에 포렌식 분석을 하여 보안 침해를 추적할 수 있거나 전송과 관련된 분쟁을 해결할 수 있도록 해야한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;추가 정보보호 목표&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;CIA Triad를 통해 보안 목절을 잘 정의했지만, 보안 목적을 완성되게 표현하려면 보안 실무 필드에서 필요한 개념을 추가해야만 한다. 그 중에서 가장 많이 언급되는 개념은 인증성, 책임추적성이다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="자격증" /><category term="정보보호기사" /><category term="자격증" /><category term="정보보호기사" /><summary type="html">정보화사회의 정보보호</summary></entry></feed>